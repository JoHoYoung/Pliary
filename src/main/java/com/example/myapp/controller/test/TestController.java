package com.example.myapp.controller.test;import com.example.myapp.context.user.Signin;import com.example.myapp.context.user.Signup;import com.example.myapp.jwt.JwtServiceImpl;import com.example.myapp.mapper.UserMapper;import com.example.myapp.model.UserModel;import com.example.myapp.util.AES256Util;import org.json.simple.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import javax.mail.MessagingException;import javax.mail.internet.MimeMessage;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Random;@RestController@RequestMapping(value = "/api")public class TestController {    @Autowired    private JwtServiceImpl jwtService;    @Autowired    private UserMapper userMapper;    @Autowired    private AES256Util Encoder;    @Autowired    public JavaMailSender emailSender;    @Autowired    public GroupMapper groupMapper;    @RequestMapping(value = "/test", method = RequestMethod.GET)    public JSONObject tt() {        GroupModel test = groupMapper.test(15);        List<TestModel> a = test.getList();        System.out.println(a);        JSONObject JSON = new JSONObject();        JSON.put("statusCode", HttpStatus.BAD_REQUEST);        JSON.put("statusMsg", "Email exist");        return JSON;    }    @RequestMapping(value = "/signup", method = RequestMethod.POST)    public JSONObject Signup(@RequestBody Signup param)    {        JSONObject JSON = new JSONObject();        String uid = param.getUid();        String email=param.getEmail();        UserModel user = userMapper.getUser(email);        if(user != null){            JSON.put("statusCode", 700);            JSON.put("statusMsg", "Email exist");            return JSON;        }        // 회원 가입시 랜덤 토큰 생성, 부여 - > 이메일 인증을 위함.        char[] charaters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'};        StringBuffer sb = new StringBuffer();        // 토큰 생성        Random rn = new Random();        for( int i = 0 ; i < 13 ; i++ ){            sb.append( charaters[ rn.nextInt( charaters.length ) ] );        }        String token = sb.toString();        // 이메일을 보냄        MimeMessage msg=emailSender.createMimeMessage();        MimeMessageHelper helper;        try {            helper = new MimeMessageHelper(msg, false, "UTF-8");            String text = "<html><body><p>인증을 위해 아래 링크를 클릭해 주세요</p>" +                    "<a href='http://15.164.169.58:8080/api/cert/?&token=" + token + "'>여기를 눌러 인증해주세요</a></body></html>";            helper.setTo(email);            helper.setSubject("Team Groot - 이메일 인증");            helper.setText(text,true);            emailSender.send(msg);            // 비밀번호 삭제.            userMapper.userSignup(uid, email, token);        } catch (MessagingException e) {            JSON.put("statusCode", 500);            JSON.put("statusMsg","Internal server Error");            e.printStackTrace();        }        JSON.put("statusCode",200);        JSON.put("statusMsg", "success");        return JSON;    }    @RequestMapping(value = "/signin", method = RequestMethod.POST)    public JSONObject signIn(@RequestBody Signin param) {        JSONObject JSON = new JSONObject();        String email = param.getEmail();        UserModel userInfo = userMapper.getUser(email);        if(userInfo == null){            JSON.put("statusCode", 700);            JSON.put("statusMsg", "Invalid Email");            return JSON;        }        JSONObject Session = new JSONObject();        Session.put("uid", userInfo.getUid());        Session.put("email",email);        System.out.println(Session.toString());        JSON.put("statusCode", 200);        JSON.put("statusMsg", 200);        JSON.put("accessToken", jwtService.accessToken(Session.toString()));        JSON.put("refreshToken", jwtService.refereshToken(Session.toString()));        return JSON;    }    // #TODO 토큰 갱신 요청시 refershToken은 Body에 담겨서 받는 형식일 것입니다. 해더에는    // #TODO 헤더에는 일단은 아무것도 안실려서 오는걸로 생각 중이에요 바디에서 받은걸 해독해서 하는걸로 해주세요    @RequestMapping(value = "/refresh", method = RequestMethod.GET)    public JSONObject refreshToken(@RequestParam("token") String token) {        String decodeSubject = jwtService.decode(token); // decodeSubject = userEmail (?)        JSONObject JSON = new JSONObject();        JSON.put("statusCode", HttpStatus.OK);        JSON.put("statusMsg", "success");        JSON.put("accessToken", jwtService.accessToken(decodeSubject));        JSON.put("refreshToken", jwtService.refereshToken(decodeSubject));        return JSON;    }    // 비밀번호 변경 - 이메일로 인증다시 받고, 토큰 재발급 안해주고 사용자가 다시 로그인 해야함    /*@PatchMapping(value="/pw")    public ChangePwRequest pwUpdate(HttpSession session, @RequestParam("newPW") String newPW){        JSONObject j = new JSONObject();        j = (JSONObject)session.getAttribute("session");        String userEmail = j.get("email").toString();        j.put("pw", newPW);        userMapper.passwordUpdate(userEmail, newPW);        return ChangePwRequest.success(                jwtService.accessToken(j.toString()),                jwtService.refereshToken(j.toString()));    }*/}